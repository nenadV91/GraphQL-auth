{"version":3,"sources":["graphql/queries.js","graphql/mutations.js","components/navbar/index.js","components/pages/Home.js","components/auth/Form.js","components/auth/Login.js","components/auth/Signup.js","components/App.js","serviceWorker.js","index.js"],"names":["current","gql","_templateObject","signup","mutations_templateObject","login","_templateObject2","logout","_templateObject3","MyNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","isOpen","state","handleLogout","then","window","location","replace","loggedOutLinks","user","react_default","a","createElement","Fragment","reactstrap_es","tag","Link","to","loggedInLinks","nav","inNavbar","caret","firstName","right","onClick","navLinks","_this$props$current","loading","bind","assertThisInitialized","color","light","expand","navbar","className","Component","compose","graphql","name","Home","AuthForm","componentWillMount","fields","reduce","r","_ref","assign","defineProperty","handleSubmit","e","preventDefault","onSubmit","handleChange","_ref2","_ref2$target","target","value","map","field","key","type","onChange","placeholder","errors","error","i","message","disabled","concat","Login","variables","res","catch","err","graphQLErrors","Form","Signup","App","Switch","Route","exact","path","component","Boolean","hostname","match","client","ApolloClient","link","HttpLink","uri","credentials","cache","InMemoryCache","ReactDOM","render","react_apollo_browser_umd","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb1717ea.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nconst current = gql`\r\n  query Current {\r\n    user {\r\n      id\r\n      email\r\n      firstName\r\n      lastName\r\n    }\r\n  }\r\n`\r\n\r\nexport {\r\n  current\r\n}","import gql from 'graphql-tag';\r\n\r\nconst signup = gql`\r\n  mutation Signup(\r\n    $email: String,\r\n    $password: String,\r\n    $firstName: String,\r\n    $lastName: String\r\n  ) {\r\n    signup(\r\n      email: $email,\r\n      password: $password,\r\n      firstName: $firstName,\r\n      lastName: $lastName\r\n    ) {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst login = gql`\r\n  mutation Login(\r\n    $email: String,\r\n    $password: String\r\n  ) {\r\n    login(\r\n      email: $email,\r\n      password: $password\r\n    ) {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst logout = gql`\r\n  mutation Logout {\r\n    logout {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nexport {\r\n  signup,\r\n  login,\r\n  logout\r\n}","import React, { Component } from 'react';\r\nimport {current} from 'graphql/queries';\r\nimport {logout} from 'graphql/mutations';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport {Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem, NavLink} from 'reactstrap';\r\nimport {UncontrolledDropdown, DropdownItem, DropdownToggle, DropdownMenu} from 'reactstrap';\r\n\r\n\r\nclass MyNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  handleLogout = () => {\r\n    this.props.logout().then(() => window.location.replace('/'))\r\n  }\r\n\r\n  loggedOutLinks = (user) => {\r\n    return <React.Fragment>\r\n      <NavItem>\r\n        <NavLink tag={Link} to={'/login'}>Login</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink tag={Link} to={'/signup'}>Signup</NavLink>\r\n      </NavItem>\r\n    </React.Fragment>\r\n  }\r\n\r\n  loggedInLinks = (user) => {\r\n    return <React.Fragment>\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          {user.firstName}\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          <DropdownItem>\r\n            <NavLink onClick={this.handleLogout}>Logout</NavLink>\r\n          </DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    </React.Fragment> \r\n  }\r\n\r\n  navLinks = () => {\r\n    let {loading, user} = this.props.current;\r\n    if(loading) return null;\r\n    if(!user) return this.loggedOutLinks(user);\r\n    else return this.loggedInLinks(user);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand tag={Link} to=\"/\">reactstrap</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              {this.navLinks()}\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(current, {name: 'current'}),\r\n  graphql(logout, {name: 'logout'})\r\n)(MyNavbar)","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"display-4\">Index page</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react';\r\nimport {Form, Input, FormGroup, FormFeedback, Button} from 'reactstrap';\r\n\r\nclass AuthForm extends Component {\r\n  state = {}\r\n\r\n  componentWillMount = () => {\r\n    this.setState(this.props.fields.reduce((r, {name}) => {\r\n      return Object.assign(r, {[name]: \"\"})\r\n    }, {}))\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state)\r\n  }\r\n\r\n  handleChange = ({target: {name, value}}) => {\r\n    this.setState({[name]: value})\r\n  }\r\n\r\n  fields = () => {\r\n    return this.props.fields.map(field => \r\n      <FormGroup key={field.name}>\r\n      <Input\r\n      name={field.name}\r\n      type={field.type}\r\n      onChange={this.handleChange}\r\n      placeholder={field.placeholder}/>\r\n    </FormGroup>)\r\n  }\r\n\r\n  errors = () => {\r\n    return this.props.errors.map((error, i) => {\r\n      return <FormFeedback \r\n      className=\"show-feedback\" \r\n      key={i}>{error.message}</FormFeedback>\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n         {this.fields()}\r\n         {this.errors()}\r\n\r\n          <div className=\"d-flex align-items-center\"> \r\n            <Button\r\n            disabled={this.props.loading}>\r\n            Submit</Button>\r\n            \r\n            <i className={`\r\n            fa fa-spinner fa-spin form-spinner\r\n            ${this.props.loading ? \"show\" : \"hide\"}`}></i>\r\n          </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AuthForm\r\n","import React, { Component } from 'react';\r\nimport AuthForm from './Form';\r\nimport {login} from 'graphql/mutations';\r\nimport {compose, graphql} from 'react-apollo';\r\n\r\nconst fields = [{\r\n  name: 'email',\r\n  placeholder: 'Email...',\r\n  type: 'email'\r\n}, {\r\n  name: 'password',\r\n  placeholder: 'Password...',\r\n  type: 'password'\r\n}]\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    errors: [],\r\n    loading: false\r\n  }\r\n\r\n  handleSubmit = (variables) => {\r\n    this.setState({loading: true, errors: []}, () => {\r\n      this.props.login({variables})\r\n      .then(res => window.location.replace('/'))\r\n      .catch(err => this.setState({\r\n        errors: err.graphQLErrors,\r\n        loading: false\r\n      }))\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"row full-height\">\r\n          <div className=\"col-sm-6\">\r\n            <h3>Login</h3>\r\n            <AuthForm \r\n            fields={fields}\r\n            loading={this.state.loading}\r\n            errors={this.state.errors}\r\n            onSubmit={this.handleSubmit} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(login, {name: 'login'})\r\n)(Login)\r\n","import React, { Component } from 'react';\r\nimport AuthForm from './Form';\r\nimport {signup} from 'graphql/mutations';\r\nimport {compose, graphql} from 'react-apollo';\r\n\r\nconst fields = [{\r\n  name: 'email',\r\n  placeholder: 'Email...',\r\n  type: 'email'\r\n}, {\r\n  name: 'firstName',\r\n  placeholder: 'First name...',\r\n  type: 'text'\r\n},{\r\n  name: 'lastName',\r\n  placeholder: 'Last name...',\r\n  type: 'text'\r\n},{\r\n  name: 'password',\r\n  placeholder: 'Password...',\r\n  type: 'password'\r\n}]\r\n\r\nclass Signup extends Component {\r\n  state = {\r\n    errors: [],\r\n    loading: false\r\n  }\r\n\r\n  handleSubmit = (variables) => {\r\n    this.setState({loading: true, errors: []}, () => {\r\n      this.props.signup({variables})\r\n      .then(res => window.location.replace('/'))\r\n      .catch(err => this.setState({\r\n        errors: err.graphQLErrors,\r\n        loading: false\r\n      }))\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"row full-height\">\r\n          <div className=\"col-sm-6\">\r\n            <h3>Signup</h3>\r\n            <AuthForm\r\n            fields={fields}\r\n            loading={this.state.loading}\r\n            errors={this.state.errors}\r\n            onSubmit={this.handleSubmit} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(signup, {name: 'signup'})\r\n)(Signup)\r\n","import React, { Component } from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport Navbar from './navbar';\r\nimport Home from './pages/Home';\r\nimport Login from './auth/Login';\r\nimport Signup from './auth/Signup';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/signup\" component={Signup} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css'; \nimport 'assets/css/style.css';\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"/graphql\",\n    credentials: 'same-origin'\n  }),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}